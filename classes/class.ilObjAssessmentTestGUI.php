<?php

use Fluxlabs\Assessment\Test\Leipzig\LeipzigTest;
use Fluxlabs\Assessment\Tools\Domain\ILIASReference;
use ILIAS\Data\UUID\Factory;
use ILIAS\Data\UUID\Uuid;
use srag\DIC\AssessmentTest\DICTrait;
use srag\Plugins\AssessmentTest\Utils\AssessmentTestTrait;
use srag\asq\Application\Service\ASQDIC;
use srag\asq\Infrastructure\Persistence\QuestionType;
use srag\asq\Infrastructure\Setup\lang\SetupAsqLanguages;
use srag\asq\Infrastructure\Setup\sql\SetupDatabase;

/**
 * Class ilObjAssessmentTestGUI
 *
 * Generated by SrPluginGenerator v1.3.5
 *
 * @author studer + raimann ag - Adrian LÃ¼thi <al@studer-raimann.ch>
 *
 * @ilCtrl_isCalledBy ilObjAssessmentTestGUI: ilRepositoryGUI
 * @ilCtrl_isCalledBy ilObjAssessmentTestGUI: ilObjPluginDispatchGUI
 * @ilCtrl_isCalledBy ilObjAssessmentTestGUI: ilAdministrationGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: ilPermissionGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: ilInfoScreenGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: ilObjectCopyGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: ilCommonActionDispatcherGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: AsqQuestionAuthoringGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: TestPlayerGUI
 * @ilCtrl_Calls      ilObjAssessmentTestGUI: QuestionPoolSelectionGUI
 */
class ilObjAssessmentTestGUI extends ilObjectPluginGUI
{
    use DICTrait;
    use AssessmentTestTrait;
    const PLUGIN_CLASS_NAME = ilAssessmentTestPlugin::class;
    const CMD_SHOW_QUESTIONS = "showQuestions";
    const CMD_PERMISSIONS = "perm";
    const CMD_SETTINGS = "settings";
    const CMD_INIT_ASQ = "initASQ";
    const CMD_CLEAR_ASQ = "clearASQ";

    const LANG_MODULE_OBJECT = "object";
    const LANG_MODULE_SETTINGS = "settings";
    const TAB_CONTENTS = "contents";
    const TAB_PERMISSIONS = "perm_settings";
    const TAB_SETTINGS = "settings";
    const TAB_QUESTIONS = "questions";

    const COL_TITLE = 'QUESTION_TITLE';
    const COL_TYPE = 'QUESTION_TYPE';
    const COL_AUTHOR = 'QUESTION_AUTHOR';
    const COL_EDITLINK = "QUESTION_EDITLINK";
    const VAL_NO_TITLE = '-----';

    private LeipzigTest $test;

    private Factory $uuid_factory;

    /**
     * @inheritDoc
     */
    protected function afterConstructor()/*: void*/
    {
        global $DIC;

        ASQDIC::initiateASQ($DIC);

        $this->uuid_factory = new Factory();

        $this->loadTest();
    }

    private function loadTest() : void
    {
        if ($this->object === null) {
            return;
        }

        $raw_test_id = $this->object->getData();

        if (is_null($raw_test_id)) {
            $this->createNewTest();
        }
        else {
            $this->test = LeipzigTest::load($this->createReference($this->uuid_factory->fromString($raw_test_id)));
        }
    }

    private function createNewTest() : void
    {
        $test_id = $this->uuid_factory->uuid4();
        $this->object->setData($test_id->toString());
        $this->object->doUpdate();

        $this->test = LeipzigTest::create($this->createReference($test_id), $this->object->getTitle(), $this->object->getDescription());
    }

    private function createReference(Uuid $id) : ILIASReference
    {
        return new ILIASReference($id, $this->object->getType(), $this->object_id);
    }

    /**
     * @inheritDoc
     */
    final public function getType() : string
    {
        return ilAssessmentTestPlugin::PLUGIN_ID;
    }

    public function performCommand(string $cmd)/*: void*/
    {
        self::dic()->help()->setScreenIdComponent(ilAssessmentTestPlugin::PLUGIN_ID);

        $next_class = self::dic()->ctrl()->getNextClass($this);

        switch (strtolower($next_class)) {
            case strtolower(TestPlayerGUI::class):
                self::dic()->tabs()->activateTab(self::TAB_CONTENTS);
                self::dic()->ctrl()->forwardCommand(new TestPlayerGUI());
                return;
            default:
                switch ($cmd) {
                    case self::CMD_SHOW_QUESTIONS:
                    case self::CMD_SETTINGS:
                    case self::CMD_INIT_ASQ:
                    case self::CMD_CLEAR_ASQ:
                        // Write commands
                        if (!ilObjAssessmentTestAccess::hasWriteAccess()) {
                            ilObjAssessmentTestAccess::redirectNonAccess($this);
                        }

                        $this->{$cmd}();
                        break;

                    default:
                        $this->test->executeCommand($cmd);
                        $this->show();
                        break;
                }
                break;
        }
    }

    /**
     * @param string $html
     */
    protected function show()/*: void*/
    {
        foreach ($this->test->ui()->getTabs() as $tab) {
            self::dic()->tabs()->addTab(
                $tab->getId(),
                $tab->getText(),
                self::dic()->ctrl()->getLinkTarget($this, $tab->getLink())
            );

            if($tab->isActive()) {
                self::dic()->tabs()->activateTab($tab->getId());
            }
        }

        foreach ($this->test->ui()->getToolbar() as $tool) {
            self::dic()->toolbar()->addComponent($tool);
        }

        self::dic()->ui()->mainTemplate()->setTitle($this->test->ui()->getTitle());

        self::dic()->ui()->mainTemplate()->setDescription($this->test->ui()->getDescription());

        self::output()->output($this->test->ui()->getContent());
    }


    /**
     * @inheritDoc
     */
    public function initCreateForm(/*string*/ $a_new_type) : ilPropertyFormGUI
    {
        $form = parent::initCreateForm($a_new_type);

        return $form;
    }


    /**
     * @inheritDoc
     *
     * @param ilObjAssessmentTest $a_new_object
     */
    public function afterSave(/*ilObjAssessmentTest*/ ilObject $a_new_object)/*: void*/
    {
        parent::afterSave($a_new_object);
    }

    /**
     *
     */
    protected function setTabs()/*: void*/
    {
        return;

        self::dic()->tabs()->addTab(self::TAB_CONTENTS, self::plugin()->translate("show_contents", self::LANG_MODULE_OBJECT), self::dic()->ctrl()
            ->getLinkTarget($this, self::CMD_SHOW_CONTENTS));

        if (ilObjAssessmentTestAccess::hasWriteAccess()) {
            self::dic()->tabs()->addTab(self::TAB_QUESTIONS, self::plugin()->translate("questions", self::LANG_MODULE_OBJECT), self::dic()
                ->ctrl()->getLinkTarget($this, self::CMD_SHOW_QUESTIONS));

            self::dic()->tabs()->addTab(self::TAB_SETTINGS, self::plugin()->translate("settings", self::LANG_MODULE_SETTINGS), self::dic()->ctrl()
                ->getLinkTarget($this, self::CMD_SETTINGS));
        }

        if (ilObjAssessmentTestAccess::hasEditPermissionAccess()) {
            self::dic()->tabs()->addTab(self::TAB_PERMISSIONS, self::plugin()->translate(self::TAB_PERMISSIONS, "", [], false), self::dic()->ctrl()
                ->getLinkTargetByClass([
                    self::class,
                    ilPermissionGUI::class
                ], self::CMD_PERMISSIONS));
        }

        self::dic()->tabs()->manual_activation = true; // Show all tabs as links when no activation
    }


    /**
     * @return string
     */
    public static function getStartCmd() : string
    {
        if (ilObjAssessmentTestAccess::hasWriteAccess()) {
            return LeipzigTest::getInitialCommand();
        } else {
            return self::CMD_SHOW_CONTENTS;
        }
    }


    /**
     * @inheritDoc
     */
    public function getAfterCreationCmd() : string
    {
        return self::getStartCmd();
    }


    /**
     * @inheritDoc
     */
    public function getStandardCmd() : string
    {
        return self::getStartCmd();
    }
}
